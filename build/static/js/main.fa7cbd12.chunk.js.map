{"version":3,"sources":["components/Header.tsx","components/RecipesList.tsx","components/RecipesTypes.tsx","components/CheckboxList.tsx","components/Recipe.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","text","linkToRecipesList","RecipesList","recipeType","elementsOfRecipesList","useState","recipes","setRecipes","isLoading","setIsLoading","isError","setIsError","useEffect","getRecipesLinks","a","fetch","then","cakesLinks","Object","json","keys","catch","error","console","log","bordered","dataSource","map","recipeName","to","pathname","renderItem","item","Item","typesOfRecipes","translation","RecipesTypes","type","index","CheckboxList","data","Panel","Collapse","rating","Recipe","location","decodeURI","useLocation","replace","name","source","ingredients","tools","actions","recipe","setRecipe","getRecipe","response","cakesList","forEach","cake","className","size","block","href","target","rel","tooltips","disabled","value","ratingPlaceholder","title","InfoCircleTwoTone","defaultActiveKey","header","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa7cbd12.chunk.js","sourcesContent":["const Header = ({text}: {text: string}) => {\r\n\treturn (\r\n\t\t<header>\r\n\t\t\t<h1>{text}</h1>\r\n\t\t</header>\r\n\t)\r\n}\r\n\r\nexport default Header;\r\n","import 'antd/dist/antd.css';\r\nimport '../index.css';\r\nimport { List } from 'antd';\r\nimport { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst linkToRecipesList = ['https://raw.githubusercontent.com/naumowicz/przepisy/main/recipes/', '.json'];\r\n\r\nconst RecipesList = ({recipeType}: {recipeType: string}) => {\r\n\tlet elementsOfRecipesList: Array<string> = [];\r\n\r\n\tconst [recipes, setRecipes] = useState<Array<string>>([]);\r\n\tconst [isLoading, setIsLoading] = useState(true);\r\n\tconst [isError, setIsError]= useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\tgetRecipesLinks();\r\n\t}, [])\r\n\r\n\tconst getRecipesLinks = async () => {\r\n\t\tfetch(`${linkToRecipesList[0]}${recipeType}${linkToRecipesList[1]}`)\r\n\t\t.then(async (cakesLinks) => {\r\n\t\t\tsetIsLoading(false);\t\t\t\r\n\t\t\telementsOfRecipesList = Object.keys(await cakesLinks.json());\r\n\t\t\tsetRecipes(elementsOfRecipesList);\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\tsetIsError(true);\r\n\t\t\tconsole.log(error)\r\n\t\t})\r\n\t}\r\n\r\n\tswitch (true) {\r\n\t\tcase isLoading:\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<h1>≈Åadowanie</h1>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\tcase isError:\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<h1>B≈ÇƒÖd!</h1>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\tdefault:\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<List\r\n\t\t\t\t\tbordered\r\n\t\t\t\t\tdataSource={recipes.map((recipeName) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<Link to={{pathname: recipeName}}>{recipeName}</Link>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})}\r\n\t\t\t\t\trenderItem={item => (\r\n\t\t\t\t\t\t<List.Item>\r\n\t\t\t\t\t\t{item}\r\n\t\t\t\t\t\t</List.Item>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default RecipesList;\r\n","import RecipesList from './RecipesList';\r\n\r\nconst typesOfRecipes = ['cakes', 'desserts'];\r\nconst translation = ['Ciasta', 'Desery'];\r\n\r\nconst RecipesTypes = () => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{typesOfRecipes.map((type, index) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<h2>{translation[index]}</h2>\r\n\t\t\t\t\t\t<RecipesList recipeType={type} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t})}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default RecipesTypes;","import {List, Checkbox } from 'antd';\r\n\r\nconst CheckboxList = ({data}: {data: Array<string>}) => {\r\n\treturn (\r\n\t\t<List\r\n\t\t\tdataSource={data.map((item) => {\r\n\t\t\t\treturn <Checkbox>{item}</Checkbox>;\r\n\t\t\t})}\r\n\t\t\trenderItem={(item) => {\r\n\t\t\t\treturn <List.Item>{item}</List.Item>;\r\n\t\t\t}}\r\n\t\t></List>\r\n\t)\r\n};\r\n\r\nexport default CheckboxList;\r\n","import { useEffect, useState } from 'react';\r\nimport RecipeInterface from '../interfaces/recipeInterface';\r\nimport { useLocation, Link } from 'react-router-dom';\r\nimport { Button, Collapse, Rate, Tooltip } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport {InfoCircleTwoTone} from '@ant-design/icons'\r\nimport CheckboxList from './CheckboxList';\r\n\r\nconst { Panel } = Collapse;\r\n\r\nconst cakesUrl = `https://raw.githubusercontent.com/naumowicz/przepisy/main/recipes/cakes.json`;\r\n\r\nconst rating = ['nijakie üòï', 'zwyk≈Çe üôÑ', 'smaczne üëç', 'dobre üòÉ', 'Glamour! üòä'];\r\n\r\nconst tooltip = 'Oceny wystawiane sƒÖ surowo. 5 gwiazdek oznacza przepis za milion dolar√≥w, natomiast 2 gwiazdki (zwyk≈Çe) mo≈ºna oceniaƒá tak jak schabowe na obiad.'\r\n\r\nconst ratingPlaceholder = 2;\r\n\r\nconst Recipe = () => {\r\n\tlet location = decodeURI(useLocation().pathname).replace('/przepisy/', '').replace('/', '');\r\n\r\n\tconst [recipe, setRecipe] = useState<RecipeInterface>({name: '', source: '', rating: 2, ingredients: [''], tools: [''], actions: ['']});\r\n\r\n\tconst getRecipe = async () => {\r\n\t\tconst response = await fetch(cakesUrl);\r\n\t\tconst cakesList = await response.json();\r\n\t\tObject.keys(cakesList).forEach(async cake => {\r\n\t\t\tif (cake === location) {\r\n\t\t\t\tconst response = await fetch(cakesList[cake]);\r\n\t\t\t\tsetRecipe(await response.json());\r\n\t\t\t}\r\n\t\t});\t\t\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tgetRecipe();\r\n\t}, []);\r\n\t\r\n\treturn (\r\n\t\t<div className=\"recipe\">\r\n\t\t\t<Link to='/'>\r\n\t\t\t\t<Button size=\"large\" block>Powr√≥t</Button>\r\n\t\t\t</Link>\r\n\t\t\t<div>\r\n\t\t\t\t<h1>{recipe.name}</h1>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<span>≈πr√≥d≈Ço: </span>\r\n\t\t\t\t<a href={recipe.source} target=\"_blank\" rel=\"noreferrer\">{recipe.source}</a>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<span>\r\n\t\t\t\t\t<span>Ocena: </span>\r\n\t\t\t\t\t<Rate tooltips={rating} disabled value={recipe.rating} />\r\n\t\t\t\t\t{recipe.rating ? <span className=\"ant-rate-text\">{rating[recipe.rating - 1]}</span> : <span className=\"ant-rate-text\">{rating[ratingPlaceholder - 1]}</span>}\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t<Tooltip\r\n\t\t\t\t\t\ttitle={tooltip}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<InfoCircleTwoTone />\r\n\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t\t<Collapse defaultActiveKey={[\"1\", \"2\", \"3\"]}>\r\n\t\t\t\t<Panel header=\"Sk≈Çadniki\" key=\"1\">\r\n\t\t\t\t\t<CheckboxList data={recipe.ingredients}></CheckboxList>\r\n\t\t\t\t</Panel>\r\n\t\t\t\t<Panel header=\"Narzƒôdzia\" key=\"2\">\r\n\t\t\t\t\t<CheckboxList data={recipe.tools}></CheckboxList>\r\n\t\t\t\t</Panel>\r\n\t\t\t\t<Panel header=\"Przepis\" key=\"3\">\r\n\t\t\t\t\t<CheckboxList data={recipe.actions}></CheckboxList>\r\n\t\t\t\t</Panel>\r\n\t\t\t</Collapse>\r\n\t\t</div>\r\n\t)\r\n\t\r\n}\r\n\r\nexport default Recipe;\r\n","import Header from './components/Header'\r\nimport RecipesTypes from './components/RecipesTypes'\r\n\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\r\nimport Recipe from './components/Recipe';\r\n\r\nconst App = () => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Header text=\"Lista przepis√≥w\"/>\r\n\t\t\t<Router>\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route exact path='/'>\r\n\t\t\t\t\t\t<RecipesTypes />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route exact path='/przepisy'>\r\n\t\t\t\t\t\t<RecipesTypes />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route path=\"/*\">\r\n\t\t\t\t\t\t<Recipe />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t</Switch>\r\n\t\t\t</Router>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}