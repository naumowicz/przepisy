{"version":3,"sources":["components/Header.tsx","components/RecipesList.tsx","components/Recipe.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","text","RecipesList","cakesListElements","useState","recipes","setRecipes","isLoading","setIsLoading","isError","setIsError","useEffect","getRecipesLinks","a","fetch","then","cakesLinks","Object","json","keys","catch","error","console","log","bordered","dataSource","map","recipeName","to","pathname","renderItem","item","Item","Recipe","location","decodeURI","useLocation","replace","name","source","ingredients","tools","actions","recipe","setRecipe","getRecipe","response","cakesList","forEach","cake","className","size","block","href","target","rel","ingredient","index","tool","action","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.61d092bb.chunk.js","sourcesContent":["const Header = ({text}: {text: string}) => {\r\n\treturn (\r\n\t\t<header>\r\n\t\t\t<h1>{text}</h1>\r\n\t\t</header>\r\n\t)\r\n}\r\n\r\nexport default Header;\r\n","import 'antd/dist/antd.css';\r\nimport '../index.css';\r\nimport { List } from 'antd';\r\nimport { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst cakesList = 'https://raw.githubusercontent.com/naumowicz/przepisy/main/recipes/cakes.json'\r\n\r\nconst RecipesList = () => {\r\n\tlet cakesListElements: Array<string> = [];\r\n\r\n\tconst [recipes, setRecipes] = useState<Array<string>>([]);\r\n\tconst [isLoading, setIsLoading] = useState(true);\r\n\tconst [isError, setIsError]= useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\tgetRecipesLinks();\r\n\t}, [])\r\n\r\n\tconst getRecipesLinks = async () => {\r\n\t\tfetch(cakesList)\r\n\t\t.then(async (cakesLinks) => {\r\n\t\t\tsetIsLoading(false);\t\t\t\r\n\t\t\tcakesListElements = Object.keys(await cakesLinks.json());\r\n\t\t\tsetRecipes(cakesListElements);\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\tsetIsError(true);\r\n\t\t\tconsole.log(error)\r\n\t\t})\r\n\t}\r\n\r\n\tswitch (true) {\r\n\t\tcase isLoading:\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<h1>Ładowanie</h1>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\tcase isError:\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<h1>Błąd!</h1>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\tdefault:\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<List\r\n\t\t\t\t\tbordered\r\n\t\t\t\t\tdataSource={recipes.map((recipeName) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<Link to={{pathname: recipeName}}>{recipeName}</Link>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})}\r\n\t\t\t\t\trenderItem={item => (\r\n\t\t\t\t\t\t<List.Item>\r\n\t\t\t\t\t\t{item}\r\n\t\t\t\t\t\t</List.Item>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default RecipesList;\r\n","import { useEffect, useState } from 'react';\r\nimport RecipeInterface from '../interfaces/recipeInterface';\r\nimport { useLocation, Link } from 'react-router-dom';\r\nimport {Button} from 'antd';\r\nimport 'antd/dist/antd.css';\r\n\r\nconst cakesUrl = `https://raw.githubusercontent.com/naumowicz/przepisy/main/recipes/cakes.json`;\r\n\r\nconst Recipe = () => {\r\n\tlet location = decodeURI(useLocation().pathname).replace('/', '');\r\n\r\n\tconst [recipe, setRecipe] = useState<RecipeInterface>({name: '', source: '', ingredients: [''], tools: [''], actions: ['']});\r\n\r\n\tconst getRecipe = async () => {\r\n\t\tconst response = await fetch(cakesUrl);\r\n\t\tconst cakesList = await response.json();\r\n\t\tObject.keys(cakesList).forEach(async cake => {\r\n\t\t\tif (cake === location) {\r\n\t\t\t\tconst response = await fetch(cakesList[cake]);\r\n\t\t\t\tsetRecipe(await response.json());\r\n\t\t\t}\r\n\t\t});\t\t\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tgetRecipe();\r\n\t}, []);\r\n\t\r\n\treturn (\r\n\t\t<div className=\"recipe\">\r\n\t\t\t<Link to='/'>\r\n\t\t\t\t<Button size=\"large\" block>Powrót</Button>\r\n\t\t\t</Link>\r\n\t\t\t<div>\r\n\t\t\t\t<h1>{recipe.name}</h1>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<h3>Źródło:</h3>\r\n\t\t\t\t<a href={recipe.source} target=\"_blank\" rel=\"noreferrer\">{recipe.source}</a>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<h3>Składniki:</h3>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{recipe.ingredients.map((ingredient, index) => {\r\n\t\t\t\t\treturn <li key={index}>{ingredient}</li>\r\n\t\t\t\t\t})}\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<h3>Narzędzia:</h3>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{recipe.tools.map((tool, index) => {\r\n\t\t\t\t\t\treturn <li key={index}>{tool}</li>\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<h3>Przepis:</h3>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{recipe.actions.map((action, index) => {\r\n\t\t\t\t\t\treturn <li key={index}>{action}</li>\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n\t\r\n}\r\n\r\nexport default Recipe;\r\n","import Header from './components/Header'\r\nimport List from './components/RecipesList'\r\n\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\r\nimport Recipe from './components/Recipe';\r\n\r\nconst App = () => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Header text=\"Lista Przepisów\"/>\r\n\t\t\t<Router>\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route exact path='/'>\r\n\t\t\t\t\t\t<List />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route path=\"/*\">\r\n\t\t\t\t\t\t<Recipe />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t</Switch>\r\n\t\t\t</Router>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}